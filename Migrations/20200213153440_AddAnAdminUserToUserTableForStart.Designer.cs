// <auto-generated />
using System;
using IOT.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IOT.Migrations
{
    [DbContext(typeof(IOTContext))]
    [Migration("20200213153440_AddAnAdminUserToUserTableForStart")]
    partial class AddAnAdminUserToUserTableForStart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IOT.Models.ServiceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Data")
                        .HasMaxLength(500);

                    b.Property<Guid>("ServiceLogId");

                    b.Property<Guid>("ServicePropertyId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceLogId");

                    b.HasIndex("ServicePropertyId");

                    b.ToTable("ServiceData");
                });

            modelBuilder.Entity("IOT.Models.ServiceLogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("LogDate");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceLogs");
                });

            modelBuilder.Entity("IOT.Models.ServiceProperties", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("Deleted");

                    b.Property<Guid>("ServiceId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceProperties");
                });

            modelBuilder.Entity("IOT.Models.ServiceUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ServiceId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceUsers");
                });

            modelBuilder.Entity("IOT.Models.Services", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<short>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("IOT.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid?>("ParentUserId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("RegisterDate");

                    b.Property<short>("Status");

                    b.Property<int>("Type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c256b01-355b-4c66-9b26-b12ff6d8d1c2"),
                            Family = "Malekzadeh",
                            Name = "Meisam",
                            Password = "BitBird",
                            RegisterDate = new DateTime(2020, 2, 13, 19, 4, 39, 996, DateTimeKind.Local).AddTicks(5234),
                            Status = (short)1,
                            Type = 1,
                            Username = "BitBird"
                        });
                });

            modelBuilder.Entity("IOT.Models.ServiceData", b =>
                {
                    b.HasOne("IOT.Models.ServiceLogs", "ServiceLog")
                        .WithMany("ServiceData")
                        .HasForeignKey("ServiceLogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IOT.Models.ServiceProperties", "ServiceProperty")
                        .WithMany("ServiceData")
                        .HasForeignKey("ServicePropertyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IOT.Models.ServiceLogs", b =>
                {
                    b.HasOne("IOT.Models.Services", "Service")
                        .WithMany("ServiceLogs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IOT.Models.Users", "User")
                        .WithMany("ServiceLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IOT.Models.ServiceProperties", b =>
                {
                    b.HasOne("IOT.Models.Services", "Service")
                        .WithMany("ServiceProperties")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IOT.Models.ServiceUsers", b =>
                {
                    b.HasOne("IOT.Models.Services", "Service")
                        .WithMany("ServiceUsers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IOT.Models.Users", "User")
                        .WithMany("ServiceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("IOT.Models.Services", b =>
                {
                    b.HasOne("IOT.Models.Users", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
